" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Enable indentation by file type
filetype plugin indent on

" Syntax highlighting
syntax enable

" Set background to dark
set background=dark

" Colorscheme
colorscheme desert 

" Set vim not to act like vi (predecessor)
set nocompatible


" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" Vim will load $VIMRUNTIME/defaults.vim if the user does not have a vimrc.
" This happens after /etc/vim/vimrc(.local) are loaded, so it will override
" any settings in these files.
" If you don't want that to happen, uncomment the below line to prevent
" defaults.vim from being loaded.
let g:skip_defaults_vim = 1


" Jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set autowrite		" Automatically save before commands like :next and :make
set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

" Commentaires
nmap <space>c <Plug>CommentaryLine
xmap <space>c <Plug>Commentary

" Recognize file types
au Bufread,BufNewFile *.tikz setfiletype tex
au Bufread,BufNewFile *.sage setfiletype python
au Bufread,BufNewFile *.py   setfiletype python
au BufNewFile,BufRead *.md,* setfiletype markdown

" Replace tab by spaces + specific file types
set tabstop=4 | set shiftwidth=4 | set expandtab
autocmd Filetype tex set tabstop=2 | set shiftwidth=2
autocmd Filetype make setlocal noexpandtab

" Set line number vs relative auto switch
set number relativenumber

" Set changing line numbers
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Set viminfo file
set viminfo='100,<1000,s100

" Always show file path
set laststatus=2
set statusline+=%F

" Source local vimrc if present
augroup vimrc
    au!
    au bufwritepost ~/.vim/vimrc source $MYVIMRC
augroup END

" Search down into subfolders
" Provide tab-completion for all file-related tasks
set path+=**

" Show command line autocomplete choices above command line
set wildmenu

" Create the 'tags' file (ctags needs to be installed first)
command! MakeTags !ctags -R .

" NOW WE CAN
" - Use ^] to jump to tag under cursor
" - Use g^] for ambiguous tags (produces liste)
" - Use ^t to jump back up the tag stack

" AUTOCOMPLETE

" - ^x^n for JUST this file
" - ^x^f for filenames (works with our path trick!)
" - ^x^] for tags only
" - ^n for anything specified by the 'complete' option

" FILE BROWSING

" Tweaks for browsing
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
"let g:netrw_list_hide=netrw_gitignore#Hide()
"let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" NOW WE CAN
" - :edit a folder to open a file browser
" - <CR>/v/t to open in an h-split/v-split/tab

